"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.semanticKindToSemanticFields = exports.isSemanticKind = exports.SemanticKind = void 0;
const validators_1 = require("../../validators/validators");
const semanticfields_1 = require("./semanticfields");
/**
 * @deprecated use SemanticFields instead. SemanticKind has not been removed to ensure backwards compatability.
 */
var SemanticKind;
(function (SemanticKind) {
    SemanticKind["Id"] = "id";
    SemanticKind["Title"] = "title";
    SemanticKind["Name"] = "name";
    SemanticKind["Image"] = "image";
    SemanticKind["Description"] = "description";
    SemanticKind["Assignee"] = "assignee";
    SemanticKind["Estimate"] = "estimate";
    SemanticKind["Status"] = "status";
    SemanticKind["IssueType"] = "issuetype";
    SemanticKind["Priority"] = "priority";
    SemanticKind["Project"] = "project";
    SemanticKind["Reporter"] = "reporter";
    SemanticKind["StartTime"] = "starttime";
    SemanticKind["EndTime"] = "endtime";
    SemanticKind["GroupByHint"] = "groupbyhint";
    SemanticKind["PrimaryKeyReference"] = "primarykeyreference";
    SemanticKind["URL"] = "url";
})(SemanticKind || (exports.SemanticKind = SemanticKind = {}));
exports.isSemanticKind = (0, validators_1.enumValidator)(SemanticKind);
function semanticKindToSemanticFields(semanticField) {
    if ((0, semanticfields_1.isSemanticFields)(semanticField)) {
        return semanticField;
    }
    else {
        switch (semanticField) {
            case SemanticKind.Id:
                return undefined;
            case SemanticKind.Title:
                return semanticfields_1.SemanticFields.Title;
            // Name could have been mapped to User or Title but all uses cases outside of the unified viz API use it as Title
            case SemanticKind.Name:
                return semanticfields_1.SemanticFields.Title;
            case SemanticKind.Image:
                return semanticfields_1.SemanticFields.ImageUrl;
            case SemanticKind.Description:
                return semanticfields_1.SemanticFields.Description;
            case SemanticKind.Assignee:
                return semanticfields_1.SemanticFields.User;
            case SemanticKind.Estimate:
                return semanticfields_1.SemanticFields.Estimate;
            case SemanticKind.Status:
                return semanticfields_1.SemanticFields.Status;
            case SemanticKind.IssueType:
                return semanticfields_1.SemanticFields.IssueType;
            case SemanticKind.Priority:
                return semanticfields_1.SemanticFields.Priority;
            case SemanticKind.Project:
                return semanticfields_1.SemanticFields.Project;
            case SemanticKind.Reporter:
                return semanticfields_1.SemanticFields.Reporter;
            case SemanticKind.StartTime:
                return semanticfields_1.SemanticFields.Time;
            case SemanticKind.EndTime:
                return semanticfields_1.SemanticFields.EndTime;
            case SemanticKind.GroupByHint:
                return undefined;
            case SemanticKind.PrimaryKeyReference:
                return undefined;
            case SemanticKind.URL:
                return semanticfields_1.SemanticFields.SourceItemUrl;
            default:
                return undefined;
        }
    }
}
exports.semanticKindToSemanticFields = semanticKindToSemanticFields;
