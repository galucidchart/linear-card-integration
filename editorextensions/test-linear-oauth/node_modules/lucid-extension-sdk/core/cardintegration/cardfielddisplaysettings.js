"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LucidCardFields = exports.StatusValues = exports.deserializeLucidCardFieldDisplaySettings = exports.serializeLucidCardFieldDisplaySettings = exports.isOnClickHandlerKey = exports.OnClickHandlerKeys = exports.isFieldDisplayType = exports.FieldDisplayType = void 0;
const validators_1 = require("../validators/validators");
/**
 * When configuring a field on a LucidCardBlock to be displayed as a data graphic, one of these values specifies
 * the function to convert the field value to the data graphic settings. The definition of these functions is in
 * LucidCardsLibrary.registerStencilDisplayTypes.
 */
var FieldDisplayType;
(function (FieldDisplayType) {
    /**
     * Text badge with the full text of the field.
     * Black text on a light gray background in the upper-right of the card.
     */
    FieldDisplayType["BasicTextBadge"] = "BasicTextBadge";
    /**
     * Given a name (usually of a user), puts a text badge with their initials (first letter of each name)
     * at the bottom-left of the card, black text on a light gray background.
     */
    FieldDisplayType["InitializedString"] = "InitializedString";
    /**
     * Given a number, display the number in the bottom-left of the card. If the number is higher than 999,
     * display 999.
     */
    FieldDisplayType["StandardEstimation"] = "StandardEstimation";
    /**
     * Given a URL, display a small image cropped into a circle in the lower-left of the card.
     */
    FieldDisplayType["ImageBadge"] = "ImageBadge";
    /**
     * Given a URL, display a small image cropped into a square in the lower-left of the card.
     */
    FieldDisplayType["SquareImageBadge"] = "SquareImageBadge";
    /**
     * Given a date, display a small calendar icon alongside a very short version of the date
     * as a string, e.g. "Sep 9"
     */
    FieldDisplayType["DateBadge"] = "DateBadge";
    /** Given an object containing iconUrl (optional) and name (optional), determine whether
     * to display as an ImageBadge or InitializedString (or nothing, if neither is present).
     */
    FieldDisplayType["UserProfile"] = "UserProfile";
})(FieldDisplayType || (exports.FieldDisplayType = FieldDisplayType = {}));
exports.isFieldDisplayType = (0, validators_1.enumValidator)(FieldDisplayType);
/**
 * When configuring a field on a LucidCardBlock to be displayed as a data graphic, this click handler value
 * specifies what to do when the user clicks on the data graphic produced.
 */
var OnClickHandlerKeys;
(function (OnClickHandlerKeys) {
    /**
     * Display the UI panel to edit fields on the data associated with the card
     */
    OnClickHandlerKeys["BasicEditPanel"] = "BasicEditPanel";
    /**
     * Open a new browser window to a URL specified by linkFormula
     */
    OnClickHandlerKeys["OpenBrowserWindow"] = "OpenBrowserWindow";
    /**
     * Display a custom UI panel to edit non-standard fields on the data associated with the card
     */
    OnClickHandlerKeys["CustomEditAction"] = "CustomEditAction";
})(OnClickHandlerKeys || (exports.OnClickHandlerKeys = OnClickHandlerKeys = {}));
exports.isOnClickHandlerKey = (0, validators_1.enumValidator)(OnClickHandlerKeys);
/** @ignore */
function serializeLucidCardFieldDisplaySettings(settings) {
    return {
        'StencilConfig': settings.stencilConfig && {
            'getterKey': settings.stencilConfig.displayType,
            'f': settings.stencilConfig.valueFormula,
            't': settings.stencilConfig.tooltipFormula,
            'l': settings.stencilConfig.linkFormula,
            'fg': settings.stencilConfig.foregroundColor,
            'bg': settings.stencilConfig.backgroundColor,
            'h': settings.stencilConfig.horizontalPosition,
            'v': settings.stencilConfig.verticalPosition,
            'onClickHandlerKey': settings.stencilConfig.onClickHandlerKey,
            'imageBadgeSettings': settings.stencilConfig.imageBadgeSettings,
            'textBadgeSettings': settings.stencilConfig.textBadgeSettings,
        },
    };
}
exports.serializeLucidCardFieldDisplaySettings = serializeLucidCardFieldDisplaySettings;
/** @ignore */
function deserializeLucidCardFieldDisplaySettings(settings) {
    return {
        stencilConfig: settings['StencilConfig'] && {
            displayType: settings['StencilConfig']['getterKey'],
            valueFormula: settings['StencilConfig']['f'],
            tooltipFormula: settings['StencilConfig']['t'],
            linkFormula: settings['StencilConfig']['l'],
            foregroundColor: settings['StencilConfig']['fg'],
            backgroundColor: settings['StencilConfig']['bg'],
            horizontalPosition: settings['StencilConfig']['h'],
            verticalPosition: settings['StencilConfig']['v'],
            onClickHandlerKey: settings['StencilConfig']['onClickHandlerKey'],
            imageBadgeSettings: settings['StencilConfig']['imageBadgeSettings'],
            textBadgeSettings: settings['StencilConfig']['textBadgeSettings'],
        },
    };
}
exports.deserializeLucidCardFieldDisplaySettings = deserializeLucidCardFieldDisplaySettings;
/**
 * These are the three possible values for the status of a basic card block.
 */
var StatusValues;
(function (StatusValues) {
    StatusValues["Todo"] = "To Do";
    StatusValues["InProgress"] = "In Progress";
    StatusValues["Done"] = "Done";
})(StatusValues || (exports.StatusValues = StatusValues = {}));
var LucidCardFields;
(function (LucidCardFields) {
    LucidCardFields["Title"] = "Title";
    LucidCardFields["Description"] = "Description";
    LucidCardFields["Assignee"] = "Assignee";
    LucidCardFields["Estimate"] = "Estimate";
    LucidCardFields["Status"] = "Status";
    LucidCardFields["StartTime"] = "StartTime";
    LucidCardFields["EndTime"] = "EndTime";
})(LucidCardFields || (exports.LucidCardFields = LucidCardFields = {}));
